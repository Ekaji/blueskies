{"version":3,"sources":["apiKey.js","card_components/card.component.jsx","card_components/TempComponent.jsx","loading_components/loading_comp.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","openWeatherKey","Card","props","date","moment","reading","dt_txt","className","format","weather","id","Math","round","main","temp","description","Tempcomp","dailyData","map","index","key","Loading","App","handleInput","e","setState","currCity","target","value","handleSubmit","preventDefault","loading","fetch","state","apiConfig","then","res","json","data","list","filter","includes","fullData","this","onSubmit","placeholder","type","onChange","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"8FAAAA,EAAOC,QAAU,CACbC,eAAgB,qC,2SCIPC,EAAO,SAACC,GACjB,IAAMC,EAAOC,IAAOF,EAAMG,QAAQC,QAClC,OACA,yBAAKC,UAAU,kBACX,4BAAKJ,EAAKK,OAAO,qBACjB,uBAAGD,UAAS,kBAAaL,EAAMG,QAAQI,QAAQ,GAAGC,GAAtC,aACZ,4BAAKC,KAAKC,MAAOV,EAAMG,QAAQQ,KAAKC,KAAM,QAA1C,SACA,4BAAKZ,EAAMG,QAAQI,QAAQ,GAAGM,eCRzBC,EAAW,SAACd,GACzB,OAAO,yBAAKK,UAAU,cACjBL,EAAMe,UAAUC,KAAI,SAACb,EAAQc,GAAT,OAChB,kBAAC,EAAD,CAAMC,IAAKD,EAAOd,QAASA,S,gBCJvBgB,G,YAAU,WACnB,OACJ,yBAAKd,UAAU,0BACb,yBAAKA,UAAU,gBACb,yBAAKA,UAAU,qBACb,yBAAKA,UAAU,iBACf,yBAAKA,UAAU,qBACb,yBAAKA,UAAU,iBACf,yBAAKA,UAAU,uBACb,yBAAKA,UAAU,mBACf,yBAAKA,UAAU,eCqDVe,E,YA1Db,aAAc,IAAD,8BACX,+CASJC,YAAc,SAACC,GACb,EAAKC,SAAS,CAACC,SAAUF,EAAEG,OAAOC,SAXrB,EAcdC,aAAe,SAACL,GAEdA,EAAEM,iBAEF,EAAKL,SAAS,CAACM,SAAS,IACzBC,MAAM,yFAAD,OAA0F,EAAKC,MAAMP,SAArG,kBAAuHQ,IAAUlC,iBACrImC,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAK,SAAAG,GAAU,IAAMrB,EAAYqB,EAAKC,KAAKC,QAAO,SAAAnC,GAAO,OAAIA,EAAQC,OAAOmC,SAAS,eACtF,EAAKhB,SAAS,CACZiB,SAAWJ,EAAKC,KAChBtB,UAAYA,EACZc,SAAU,QAvBV,EAAKE,MAAQ,CACVhB,UAAW,GACXS,SAAU,GACVK,SAAS,GALD,E,sEA+BJ,IAAD,EACwBY,KAAKV,MAA5BF,EADD,EACCA,QAASd,EADV,EACUA,UAChB,OACE,yBAAKV,UAAU,sBACX,wBAAIA,UAAU,SAAd,0BACA,wBAAIA,UAAU,SAAd,QAA6BoC,KAAKV,MAAMP,UAEtC,0BAAMnB,UAAU,WAAWqC,SAAUD,KAAKd,cACxC,yBAAKtB,UAAU,WACb,2BAAOA,UAAU,aAAasC,YAAY,aAAaC,KAAK,SAASC,SAAUJ,KAAKpB,YAAaK,MAAOe,KAAKV,MAAMP,YAErH,yBAAKnB,UAAU,WACb,2BAAOA,UAAU,cAAcuC,KAAK,aAI5C,6BACIf,EAAS,kBAAC,EAAD,MAAe,kBAAC,EAAD,CAAUd,UAAcA,U,GAjD1C+B,aCKEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBzB,MAAK,SAAA0B,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.240ad5a9.chunk.js","sourcesContent":["module.exports = {\r\n    openWeatherKey: '5bdf42518b656748fdf297201fe14f53'\r\n}","import React from 'react'\r\nimport '../owfont-master/css/owfont-regular.css'\r\nimport '../card_list_styles/card.style.css'\r\nimport moment from 'moment'\r\n\r\nexport const Card = (props) =>  {\r\n    const date = moment(props.reading.dt_txt);\r\n    return(\r\n    <div className='card-container'>\r\n        <h3>{date.format('dddd-MMM-DD-YYYY')}</h3>\r\n        <i className={`owf owf-${props.reading.weather[0].id} owf-5x`}></i>\r\n        <h1>{Math.round((props.reading.main.temp)-273.15)}Â°c</h1>\r\n        <h2>{props.reading.weather[0].description}</h2>\r\n    </div>\r\n    )\r\n}","import React from 'react';\r\nimport { Card } from './card.component'\r\n\r\n\r\nexport const Tempcomp = (props) => {\r\nreturn <div className='grid_cards'>\r\n    {props.dailyData.map((reading,index) => \r\n         <Card key={index} reading={reading} /> \r\n          )}\r\n        </div>     \r\n}","import React from 'react';\r\nimport './loading_comp.style.css';\r\n\r\nexport const Loading = () => {\r\n    return(\r\n<div className=\"loadingDiv spinner-box\">\r\n  <div className=\"solar-system\">\r\n    <div className=\"earth-orbit orbit\">\r\n      <div className=\"planet earth\"></div>\r\n      <div className=\"venus-orbit orbit\">\r\n        <div className=\"planet venus\"></div>\r\n        <div className=\"mercury-orbit orbit\">\r\n          <div className=\"planet mercury\"></div>\r\n          <div className=\"sun\"></div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</div>\r\n    )\r\n\r\n}","import React, { Component } from 'react';\r\nimport './card_list_styles/gridStyle.css'\r\nimport {Tempcomp} from './card_components/TempComponent'\r\nimport apiConfig from './apiKey'\r\nimport './App.css';\r\nimport {Loading} from './loading_components/loading_comp'\r\n\r\nclass App extends Component{\r\n  constructor(){\r\n    super();\r\n    this.state = {\r\n       dailyData: [],\r\n       currCity: '',\r\n       loading: false,\r\n    }\r\n}\r\n   \r\n\r\nhandleInput = (e) => {\r\n  this.setState({currCity: e.target.value})\r\n  }\r\n\r\n handleSubmit = (e) => {\r\n   //prevents the form from submitting\r\n   e.preventDefault();\r\n   //used template literals to pass dynamic arguements to the api\r\n   this.setState({loading: true})\r\n  fetch(`https://cors-anywhere.herokuapp.com/http://api.openweathermap.org/data/2.5/forecast?q=${this.state.currCity}&appid=${apiConfig.openWeatherKey}`)\r\n  .then(res => res.json())\r\n  .then(data => { const dailyData = data.list.filter(reading => reading.dt_txt.includes(\"18:00:00\"))\r\n  this.setState({\r\n    fullData : data.list,\r\n    dailyData : dailyData,\r\n    loading : false\r\n  }\r\n  )}\r\n) \r\n}\r\n\r\n  render(){\r\n    const {loading, dailyData } = this.state\r\n    return (\r\n      <div className=\"App App_background\" >\r\n          <h1 className='indie' >Blue Skies Weather App</h1>\r\n          <h3 className='indie' >city:{this.state.currCity}</h3>\r\n\r\n            <form className='Form_box' onSubmit={this.handleSubmit}> \r\n              <div className='formDiv'>\r\n                <input className='form_input' placeholder='Enter City' type='search' onChange={this.handleInput} value={this.state.currCity} />\r\n              </div>\r\n              <div className='formDiv'>\r\n                <input className='form_button' type=\"submit\" />\r\n              </div>   \r\n            </form>\r\n      \r\n        <div>\r\n          { loading? <Loading  /> : <Tempcomp dailyData = { dailyData } /> }\r\n        </div>\r\n\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\n\r\n\r\nexport default App;\r\n\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}